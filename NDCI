// DISCLAIMER: The attached browser script is still in the experimental stage of an ongoing MS Chemistry thesis and is currently being validated and verified. Use this script only for learning purposes in relation to this workshop. The final script will be published and shared in due time.
// NDCI Script for Laguna Lake by James Silao
// adapted from Jeremy Kravitz & Mark Matthews (2020)'s CyanoLakes Chlorophyll-a L1C script
// Water body detection - credit Mohor Gartner
var MNDWI_threshold=0.42; //testing shows recommended 0.42 for Sentinel-2 and Landsat 8. For the scene in article [1] it was 0.8.
var NDWI_threshold=0.4; //testing shows recommended 0.4 for Sentinel-2 and Landsat 8. For the scene in article [1] it was 0.5.
var filter_UABS=true;
var filter_SSI=false;
function wbi(r,g,b,nir,swir1,swir2) {
    //water surface
    let ws=0;
    //try as it might fail for some pixel
    try {
        //calc indices
        //[4][5][1][8][2][3]
        var ndvi=(nir-r)/(nir+r),mndwi=(g-swir1)/(g+swir1),ndwi=(g-nir)/(g+nir),ndwi_leaves=(nir-swir1)/(nir+swir1),aweish=b+2.5*g-1.5*(nir+swir1)-0.25*swir2,aweinsh=4*(g-swir1)-(0.25*nir+2.75*swir1);
        //[10][11][12]
        var dbsi=((swir1-g)/(swir1+g))-ndvi,wii=Math.pow(nir,2)/r,wri=(g+r)/(nir+swir1),puwi=5.83*g-6.57*r-30.32*nir+2.25,uwi=(g-1.1*r-5.2*nir+0.4)/Math.abs(g-1.1*r-5.2*nir),usi=0.25*(g/r)-0.57*(nir/g)-0.83*(b/g)+1;
        //DEFINE WB
        if (mndwi>MNDWI_threshold||ndwi>NDWI_threshold||aweinsh>0.1879||aweish>0.1112||ndvi<-0.2||ndwi_leaves>1) {ws=1;}
        //filter urban areas [3] and bare soil [10]
        if (filter_UABS && ws==1) {
            if ((aweinsh<=-0.03)||(dbsi>0)) {ws=0;}
        }
    }catch(err){ws=0;}
    return ws;
}
let water = wbi(B04,B03,B02,B08,B11,B12);

function NDCI(a, b) {
    return (b - a) / (b + a);
}
let NDCIv = NDCI(B04, B05);

// True color
let trueColor = [3 * B04, 3 * B03, 3 * B02];

function interpolateColor(color1, color2, factor) {
    return [
        color1[0] + (color2[0] - color1[0]) * factor,
        color1[1] + (color2[1] - color1[1]) * factor,
        color1[2] + (color2[2] - color1[2]) * factor
    ];
}

// Render colour map
if (water == 0) {
    return trueColor;
} else if (NDCIv <= -0.884980242) {
    return trueColor;

// true color to blue
} else if (NDCIv <= -0.032882573) {
    let factor = (NDCIv + 0.884980242) / (0.884980242 - 0.032882573);
    return interpolateColor(trueColor, [0, 128 / 255, 255 / 255], factor);

// blue to green
} else if (NDCIv <= 0.042606387) {
    let factor = (NDCIv + 0.032882573) / (0.042606387 + 0.032882573);
    return interpolateColor([0, 128 / 255, 255 / 255], [0, 255 / 255, 128 / 255], factor);

// green to yellow
} else if (NDCIv <= 0.118095347) {
    let factor = (NDCIv - 0.042606387) / (0.118095347 - 0.042606387);
    return interpolateColor([0, 255 / 255, 128 / 255], [255 / 255, 255 / 255, 0], factor);

// yellow to orange
} else if (NDCIv <= 0.162253558) {
    let factor = (NDCIv - 0.118095347) / (0.162253558 - 0.118095347);
    return interpolateColor([255 / 255, 255 / 255, 0], [255 / 255, 128 / 255, 0], factor);

// orange to red
} else if (NDCIv > 0.162253558) {
    let factor = (NDCIv - 0.162253558) / (0.162977199 - 0.162253558); 
    return interpolateColor([255 / 255, 128 / 255, 0], [255 / 255, 0, 0], factor);

// maroon
} else {
    return [128 / 255, 0, 0];
}
